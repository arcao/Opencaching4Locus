@file:Suppress("NOTHING_TO_INLINE", "DEPRECATION")

package com.arcao.opencaching4locus.ui.base.util

import android.app.Fragment
import android.content.Context
import android.content.res.Resources
import android.support.annotation.PluralsRes
import android.support.annotation.StringRes
import org.oshkimaadziig.george.androidutils.SpanFormatter

/**
 * Returns formatted text from string resources
 *
 * @param id string resource id
 * @param args arguments for String.format(...)
 * @return formatted SpannedString
 */
inline fun Context.getText(@StringRes id: Int, vararg args: Any): CharSequence =
        SpanFormatter.format(resources.configuration.locale, getText(id), *args)

/**
 * Returns formatted text from string resources
 *
 * @param id string resource id
 * @param args arguments for String.format(...)
 * @return formatted SpannedString
 */
inline fun Fragment.getText(@StringRes id: Int, vararg args: Any): CharSequence =
        SpanFormatter.format(resources.configuration.locale, getText(id), *args)

/**
 * Formats the string necessary for grammatically correct pluralization
 * of the given resource ID for the given quantity, using the given arguments.
 * Note that the string is selected based solely on grammatical necessity,
 * and that such rules differ between languages. Do not assume you know which string
 * will be returned for a given quantity. See
 * [String Resources]({@docRoot}guide/topics/resources/string-resource.html#Plurals)
 * for more detail.
 *
 * Substitution of format arguments works as if using [java.util.Formatter] and
 * [java.lang.String.format]. The resulting string can be text styled.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param quantity The number used to get the correct string for the current language's
 *           plural rules.
 * @param formatArgs The format arguments that will be used for substitution.
 *
 * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
 * @return CharSequence The string data associated with the resource, plus
 *         possibly styled text information.
 */
@Throws(Resources.NotFoundException::class)
inline fun Context.getQuantityText(@PluralsRes id: Int, quantity: Int, vararg formatArgs: Any): CharSequence =
        SpanFormatter.format(resources.configuration.locale, resources.getQuantityText(id, quantity), *formatArgs)